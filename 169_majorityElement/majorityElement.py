# -*-coding:utf-8-*-
# 169.求众数
# 给定一个大小为 n 的数组，找到其中的众数。众数是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。
# 你可以假设数组是非空的，并且给定的数组总是存在众数。
import numpy as np


class Solution(object):
    def majorityElement1(self, nums):
        '''
        @description: 使用numpy模块来解决，但只能用在非负数据集,因为索引值是从0开始的。
        @param {type}
        @return:
        '''
        np.mean(nums)  # 求均值
        np.median(nums)  # 求中位数
        # 返回了一个长度为nums最大值的列表，列表中的每个值代表其索引位数值出现在nums中的次数，即count每个数值
        counts = np.bincount(nums)
        np.argmax(counts)  # 返回众数

    def majorityElement2(self, nums):
        """
        :desc: 基于map来统计
        :type nums: List[int]
        :rtype: int
        """
        count = {}
        for i in nums:
            if i in count.keys():
                count[i] += 1
            else:
                count[i] = 1

        times = len(nums)/2
        for key in count.keys():
            if count[key] > times:
                return key

    def majorityElement3(self, nums):
        """
        :desc: 先排序nums，再挨个count nums[i],最后计算count>len(nums)/2
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        count = 1
        for i in range(len(nums)):
            if nums[i] == nums[i-1]:
                count += 1
                if count > len(nums)/2:
                    return nums[i]
            else:
                count = 1

    def majorityElement4(self, nums):
        """
        :desc: 先排序nums，直接返回num[len(nums)/2]
        :type nums: List[int]
        :rtype: int
        """
        nums.sort()
        return nums[len(nums)/2] # 也可以直接返回：sorted(nums)[len(nums)/2]

    def majorityElement5(self, nums):
        """
        :desc: 采用分治法
        :type nums: List[int]
        :rtype: int
        """
        if len(nums) == 0:
            return None
        if len(nums) == 1:
            return nums[0]
        left = self.majorityElement5(nums[:len(nums)//2]) # nums[:a]表示从a索引位置之前的
        right = self.majorityElement5(nums[(len(nums)//2):]) # nums[a:]表示从a索引位置以后的
        if left==right:
            return left
        return [right,left][nums.count(left)>nums.count(right)]
        

    def majorityElement6(self, nums):
        res=set(nums)
        n=len(nums)/2
        for item in res:
            if(nums.count(item)>n):
                return item


if __name__ == "__main__":
    nums = [87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78,87,78]
    s = Solution()
    print(s.majorityElement5(nums))
